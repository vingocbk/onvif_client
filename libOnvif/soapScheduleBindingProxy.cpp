/* soapScheduleBindingProxy.cpp
   Generated by gSOAP 2.8.114 for onvif.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapScheduleBindingProxy.h"

ScheduleBindingProxy::ScheduleBindingProxy()
{	this->soap = soap_new();
	this->soap_own = true;
	ScheduleBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ScheduleBindingProxy::ScheduleBindingProxy(const ScheduleBindingProxy& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
}

ScheduleBindingProxy::ScheduleBindingProxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	ScheduleBindingProxy_init(_soap->imode, _soap->omode);
}

ScheduleBindingProxy::ScheduleBindingProxy(struct soap *_soap, const char *soap_endpoint_url)
{	this->soap = _soap;
	this->soap_own = false;
	ScheduleBindingProxy_init(_soap->imode, _soap->omode);
	soap_endpoint = soap_endpoint_url;
}

ScheduleBindingProxy::ScheduleBindingProxy(const char *soap_endpoint_url)
{	this->soap = soap_new();
	this->soap_own = true;
	ScheduleBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = soap_endpoint_url;
}

ScheduleBindingProxy::ScheduleBindingProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	ScheduleBindingProxy_init(iomode, iomode);
}

ScheduleBindingProxy::ScheduleBindingProxy(const char *soap_endpoint_url, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	ScheduleBindingProxy_init(iomode, iomode);
	soap_endpoint = soap_endpoint_url;
}

ScheduleBindingProxy::ScheduleBindingProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	ScheduleBindingProxy_init(imode, omode);
}

ScheduleBindingProxy::~ScheduleBindingProxy()
{	if (this->soap_own)
	{	this->destroy();
		soap_free(this->soap);
	}
}

void ScheduleBindingProxy::ScheduleBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        { "SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL },
        { "SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL },
        { "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
        { "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
        { "chan", "http://schemas.microsoft.com/ws/2005/02/duplex", NULL, NULL },
        { "wsdd", "http://schemas.xmlsoap.org/ws/2005/04/discovery", NULL, NULL },
        { "c14n", "http://www.w3.org/2001/10/xml-exc-c14n#", NULL, NULL },
        { "ds", "http://www.w3.org/2000/09/xmldsig#", NULL, NULL },
        { "saml1", "urn:oasis:names:tc:SAML:1.0:assertion", NULL, NULL },
        { "saml2", "urn:oasis:names:tc:SAML:2.0:assertion", NULL, NULL },
        { "wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd", NULL, NULL },
        { "xenc", "http://www.w3.org/2001/04/xmlenc#", NULL, NULL },
        { "wsc", "http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512", "http://schemas.xmlsoap.org/ws/2005/02/sc", NULL },
        { "wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd", NULL },
        { "wsdd10", "http://tempuri.org/wsdd10.xsd", NULL, NULL },
        { "wsa5", "http://www.w3.org/2005/08/addressing", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL },
        { "ns1", "http://www.onvif.org/ver20/analytics/humanface", NULL, NULL },
        { "ns2", "http://www.onvif.org/ver20/analytics/humanbody", NULL, NULL },
        { "ns4", "http://www.onvif.org/ver10/pacs", NULL, NULL },
        { "xmime", "http://tempuri.org/xmime.xsd", NULL, NULL },
        { "xop", "http://www.w3.org/2004/08/xop/include", NULL, NULL },
        { "tt", "http://www.onvif.org/ver10/schema", NULL, NULL },
        { "wsrfbf", "http://docs.oasis-open.org/wsrf/bf-2", NULL, NULL },
        { "wstop", "http://docs.oasis-open.org/wsn/t-1", NULL, NULL },
        { "wsrfr", "http://docs.oasis-open.org/wsrf/r-2", NULL, NULL },
        { "ns3", "http://www.onvif.org/ver10/schedule/wsdl", NULL, NULL },
        { "ns5", "http://www.onvif.org/ver10/credential/wsdl", NULL, NULL },
        { "tan", "http://www.onvif.org/ver20/analytics/wsdl", NULL, NULL },
        { "tas", "http://www.onvif.org/ver10/advancedsecurity/wsdl", NULL, NULL },
        { "tdn", "http://www.onvif.org/ver10/network/wsdl", NULL, NULL },
        { "tds", "http://www.onvif.org/ver10/device/wsdl", NULL, NULL },
        { "tev", "http://www.onvif.org/ver10/events/wsdl", NULL, NULL },
        { "wsnt", "http://docs.oasis-open.org/wsn/b-2", NULL, NULL },
        { "timg", "http://www.onvif.org/ver20/imaging/wsdl", NULL, NULL },
        { "tmd", "http://www.onvif.org/ver10/deviceIO/wsdl", NULL, NULL },
        { "tptz", "http://www.onvif.org/ver20/ptz/wsdl", NULL, NULL },
        { "trc", "http://www.onvif.org/ver10/recording/wsdl", NULL, NULL },
        { "trp", "http://www.onvif.org/ver10/replay/wsdl", NULL, NULL },
        { "trt", "http://www.onvif.org/ver10/media/wsdl", NULL, NULL },
        { "trv", "http://www.onvif.org/ver10/receiver/wsdl", NULL, NULL },
        { NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

ScheduleBindingProxy *ScheduleBindingProxy::copy()
{	ScheduleBindingProxy *dup = SOAP_NEW_UNMANAGED(ScheduleBindingProxy);
	if (dup)
	{	soap_done(dup->soap);
		soap_copy_context(dup->soap, this->soap);
	}
	return dup;
}

ScheduleBindingProxy& ScheduleBindingProxy::operator=(const ScheduleBindingProxy& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
		this->soap_endpoint = rhs.soap_endpoint;
	}
	return *this;
}

void ScheduleBindingProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void ScheduleBindingProxy::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	ScheduleBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void ScheduleBindingProxy::soap_noheader()
{	this->soap->header = NULL;
}

void ScheduleBindingProxy::soap_header(char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance, struct wsdd__AppSequenceType *wsdd__AppSequence, struct _wsse__Security *wsse__Security)
{
	::soap_header(this->soap);
	this->soap->header->wsa5__MessageID = wsa5__MessageID;
	this->soap->header->wsa5__RelatesTo = wsa5__RelatesTo;
	this->soap->header->wsa5__From = wsa5__From;
	this->soap->header->wsa5__ReplyTo = wsa5__ReplyTo;
	this->soap->header->wsa5__FaultTo = wsa5__FaultTo;
	this->soap->header->wsa5__To = wsa5__To;
	this->soap->header->wsa5__Action = wsa5__Action;
	this->soap->header->chan__ChannelInstance = chan__ChannelInstance;
	this->soap->header->wsdd__AppSequence = wsdd__AppSequence;
	this->soap->header->wsse__Security = wsse__Security;
}

::SOAP_ENV__Header *ScheduleBindingProxy::soap_header()
{	return this->soap->header;
}

::SOAP_ENV__Fault *ScheduleBindingProxy::soap_fault()
{	return this->soap->fault;
}

const char *ScheduleBindingProxy::soap_fault_subcode()
{	return ::soap_fault_subcode(this->soap);
}

const char *ScheduleBindingProxy::soap_fault_string()
{	return ::soap_fault_string(this->soap);
}

const char *ScheduleBindingProxy::soap_fault_detail()
{	return ::soap_fault_detail(this->soap);
}

int ScheduleBindingProxy::soap_close_socket()
{	return ::soap_closesock(this->soap);
}

int ScheduleBindingProxy::soap_force_close_socket()
{	return ::soap_force_closesock(this->soap);
}

void ScheduleBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void ScheduleBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *ScheduleBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int ScheduleBindingProxy::send_GetServiceCapabilities(const char *soap_endpoint_url, const char *soap_action, _ns3__GetServiceCapabilities *ns3__GetServiceCapabilities)
{
	struct __ns3__GetServiceCapabilities soap_tmp___ns3__GetServiceCapabilities;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/schedule/wsdl/GetServiceCapabilities";
	soap_tmp___ns3__GetServiceCapabilities.ns3__GetServiceCapabilities = ns3__GetServiceCapabilities;
	soap_begin(soap);
	soap_set_version(soap, 2); /* use SOAP1.2 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns3__GetServiceCapabilities(soap, &soap_tmp___ns3__GetServiceCapabilities);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__GetServiceCapabilities(soap, &soap_tmp___ns3__GetServiceCapabilities, "-ns3:GetServiceCapabilities", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__GetServiceCapabilities(soap, &soap_tmp___ns3__GetServiceCapabilities, "-ns3:GetServiceCapabilities", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ScheduleBindingProxy::recv_GetServiceCapabilities(_ns3__GetServiceCapabilitiesResponse &ns3__GetServiceCapabilitiesResponse)
{
	ns3__GetServiceCapabilitiesResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__GetServiceCapabilitiesResponse.soap_get(soap, "ns3:GetServiceCapabilitiesResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ScheduleBindingProxy::send_GetScheduleState(const char *soap_endpoint_url, const char *soap_action, _ns3__GetScheduleState *ns3__GetScheduleState)
{
	struct __ns3__GetScheduleState soap_tmp___ns3__GetScheduleState;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/schedule/wsdl/GetScheduleState";
	soap_tmp___ns3__GetScheduleState.ns3__GetScheduleState = ns3__GetScheduleState;
	soap_begin(soap);
	soap_set_version(soap, 2); /* use SOAP1.2 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns3__GetScheduleState(soap, &soap_tmp___ns3__GetScheduleState);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__GetScheduleState(soap, &soap_tmp___ns3__GetScheduleState, "-ns3:GetScheduleState", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__GetScheduleState(soap, &soap_tmp___ns3__GetScheduleState, "-ns3:GetScheduleState", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ScheduleBindingProxy::recv_GetScheduleState(_ns3__GetScheduleStateResponse &ns3__GetScheduleStateResponse)
{
	ns3__GetScheduleStateResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__GetScheduleStateResponse.soap_get(soap, "ns3:GetScheduleStateResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ScheduleBindingProxy::send_GetScheduleInfo(const char *soap_endpoint_url, const char *soap_action, _ns3__GetScheduleInfo *ns3__GetScheduleInfo)
{
	struct __ns3__GetScheduleInfo soap_tmp___ns3__GetScheduleInfo;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/schedule/wsdl/GetScheduleInfo";
	soap_tmp___ns3__GetScheduleInfo.ns3__GetScheduleInfo = ns3__GetScheduleInfo;
	soap_begin(soap);
	soap_set_version(soap, 2); /* use SOAP1.2 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns3__GetScheduleInfo(soap, &soap_tmp___ns3__GetScheduleInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__GetScheduleInfo(soap, &soap_tmp___ns3__GetScheduleInfo, "-ns3:GetScheduleInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__GetScheduleInfo(soap, &soap_tmp___ns3__GetScheduleInfo, "-ns3:GetScheduleInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ScheduleBindingProxy::recv_GetScheduleInfo(_ns3__GetScheduleInfoResponse &ns3__GetScheduleInfoResponse)
{
	ns3__GetScheduleInfoResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__GetScheduleInfoResponse.soap_get(soap, "ns3:GetScheduleInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ScheduleBindingProxy::send_GetScheduleInfoList(const char *soap_endpoint_url, const char *soap_action, _ns3__GetScheduleInfoList *ns3__GetScheduleInfoList)
{
	struct __ns3__GetScheduleInfoList soap_tmp___ns3__GetScheduleInfoList;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/schedule/wsdl/GetScheduleInfoList";
	soap_tmp___ns3__GetScheduleInfoList.ns3__GetScheduleInfoList = ns3__GetScheduleInfoList;
	soap_begin(soap);
	soap_set_version(soap, 2); /* use SOAP1.2 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns3__GetScheduleInfoList(soap, &soap_tmp___ns3__GetScheduleInfoList);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__GetScheduleInfoList(soap, &soap_tmp___ns3__GetScheduleInfoList, "-ns3:GetScheduleInfoList", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__GetScheduleInfoList(soap, &soap_tmp___ns3__GetScheduleInfoList, "-ns3:GetScheduleInfoList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ScheduleBindingProxy::recv_GetScheduleInfoList(_ns3__GetScheduleInfoListResponse &ns3__GetScheduleInfoListResponse)
{
	ns3__GetScheduleInfoListResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__GetScheduleInfoListResponse.soap_get(soap, "ns3:GetScheduleInfoListResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ScheduleBindingProxy::send_GetSchedules(const char *soap_endpoint_url, const char *soap_action, _ns3__GetSchedules *ns3__GetSchedules)
{
	struct __ns3__GetSchedules soap_tmp___ns3__GetSchedules;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/schedule/wsdl/GetSchedules";
	soap_tmp___ns3__GetSchedules.ns3__GetSchedules = ns3__GetSchedules;
	soap_begin(soap);
	soap_set_version(soap, 2); /* use SOAP1.2 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns3__GetSchedules(soap, &soap_tmp___ns3__GetSchedules);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__GetSchedules(soap, &soap_tmp___ns3__GetSchedules, "-ns3:GetSchedules", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__GetSchedules(soap, &soap_tmp___ns3__GetSchedules, "-ns3:GetSchedules", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ScheduleBindingProxy::recv_GetSchedules(_ns3__GetSchedulesResponse &ns3__GetSchedulesResponse)
{
	ns3__GetSchedulesResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__GetSchedulesResponse.soap_get(soap, "ns3:GetSchedulesResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ScheduleBindingProxy::send_GetScheduleList(const char *soap_endpoint_url, const char *soap_action, _ns3__GetScheduleList *ns3__GetScheduleList)
{
	struct __ns3__GetScheduleList soap_tmp___ns3__GetScheduleList;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/schedule/wsdl/GetScheduleList";
	soap_tmp___ns3__GetScheduleList.ns3__GetScheduleList = ns3__GetScheduleList;
	soap_begin(soap);
	soap_set_version(soap, 2); /* use SOAP1.2 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns3__GetScheduleList(soap, &soap_tmp___ns3__GetScheduleList);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__GetScheduleList(soap, &soap_tmp___ns3__GetScheduleList, "-ns3:GetScheduleList", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__GetScheduleList(soap, &soap_tmp___ns3__GetScheduleList, "-ns3:GetScheduleList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ScheduleBindingProxy::recv_GetScheduleList(_ns3__GetScheduleListResponse &ns3__GetScheduleListResponse)
{
	ns3__GetScheduleListResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__GetScheduleListResponse.soap_get(soap, "ns3:GetScheduleListResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ScheduleBindingProxy::send_CreateSchedule(const char *soap_endpoint_url, const char *soap_action, _ns3__CreateSchedule *ns3__CreateSchedule)
{
	struct __ns3__CreateSchedule soap_tmp___ns3__CreateSchedule;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/schedule/wsdl/CreateSchedule";
	soap_tmp___ns3__CreateSchedule.ns3__CreateSchedule = ns3__CreateSchedule;
	soap_begin(soap);
	soap_set_version(soap, 2); /* use SOAP1.2 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns3__CreateSchedule(soap, &soap_tmp___ns3__CreateSchedule);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__CreateSchedule(soap, &soap_tmp___ns3__CreateSchedule, "-ns3:CreateSchedule", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__CreateSchedule(soap, &soap_tmp___ns3__CreateSchedule, "-ns3:CreateSchedule", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ScheduleBindingProxy::recv_CreateSchedule(_ns3__CreateScheduleResponse &ns3__CreateScheduleResponse)
{
	ns3__CreateScheduleResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__CreateScheduleResponse.soap_get(soap, "ns3:CreateScheduleResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ScheduleBindingProxy::send_SetSchedule(const char *soap_endpoint_url, const char *soap_action, _ns3__SetSchedule *ns3__SetSchedule)
{
	struct __ns3__SetSchedule soap_tmp___ns3__SetSchedule;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/schedule/wsdl/SetSchedule";
	soap_tmp___ns3__SetSchedule.ns3__SetSchedule = ns3__SetSchedule;
	soap_begin(soap);
	soap_set_version(soap, 2); /* use SOAP1.2 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns3__SetSchedule(soap, &soap_tmp___ns3__SetSchedule);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__SetSchedule(soap, &soap_tmp___ns3__SetSchedule, "-ns3:SetSchedule", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__SetSchedule(soap, &soap_tmp___ns3__SetSchedule, "-ns3:SetSchedule", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ScheduleBindingProxy::recv_SetSchedule(_ns3__SetScheduleResponse &ns3__SetScheduleResponse)
{
	ns3__SetScheduleResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__SetScheduleResponse.soap_get(soap, "ns3:SetScheduleResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ScheduleBindingProxy::send_ModifySchedule(const char *soap_endpoint_url, const char *soap_action, _ns3__ModifySchedule *ns3__ModifySchedule)
{
	struct __ns3__ModifySchedule soap_tmp___ns3__ModifySchedule;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/schedule/wsdl/ModifySchedule";
	soap_tmp___ns3__ModifySchedule.ns3__ModifySchedule = ns3__ModifySchedule;
	soap_begin(soap);
	soap_set_version(soap, 2); /* use SOAP1.2 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns3__ModifySchedule(soap, &soap_tmp___ns3__ModifySchedule);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__ModifySchedule(soap, &soap_tmp___ns3__ModifySchedule, "-ns3:ModifySchedule", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__ModifySchedule(soap, &soap_tmp___ns3__ModifySchedule, "-ns3:ModifySchedule", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ScheduleBindingProxy::recv_ModifySchedule(_ns3__ModifyScheduleResponse &ns3__ModifyScheduleResponse)
{
	ns3__ModifyScheduleResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__ModifyScheduleResponse.soap_get(soap, "ns3:ModifyScheduleResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ScheduleBindingProxy::send_DeleteSchedule(const char *soap_endpoint_url, const char *soap_action, _ns3__DeleteSchedule *ns3__DeleteSchedule)
{
	struct __ns3__DeleteSchedule soap_tmp___ns3__DeleteSchedule;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/schedule/wsdl/DeleteSchedule";
	soap_tmp___ns3__DeleteSchedule.ns3__DeleteSchedule = ns3__DeleteSchedule;
	soap_begin(soap);
	soap_set_version(soap, 2); /* use SOAP1.2 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns3__DeleteSchedule(soap, &soap_tmp___ns3__DeleteSchedule);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__DeleteSchedule(soap, &soap_tmp___ns3__DeleteSchedule, "-ns3:DeleteSchedule", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__DeleteSchedule(soap, &soap_tmp___ns3__DeleteSchedule, "-ns3:DeleteSchedule", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ScheduleBindingProxy::recv_DeleteSchedule(_ns3__DeleteScheduleResponse &ns3__DeleteScheduleResponse)
{
	ns3__DeleteScheduleResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__DeleteScheduleResponse.soap_get(soap, "ns3:DeleteScheduleResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ScheduleBindingProxy::send_GetSpecialDayGroupInfo(const char *soap_endpoint_url, const char *soap_action, _ns3__GetSpecialDayGroupInfo *ns3__GetSpecialDayGroupInfo)
{
	struct __ns3__GetSpecialDayGroupInfo soap_tmp___ns3__GetSpecialDayGroupInfo;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/schedule/wsdl/GetSpecialDayGroupInfo";
	soap_tmp___ns3__GetSpecialDayGroupInfo.ns3__GetSpecialDayGroupInfo = ns3__GetSpecialDayGroupInfo;
	soap_begin(soap);
	soap_set_version(soap, 2); /* use SOAP1.2 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns3__GetSpecialDayGroupInfo(soap, &soap_tmp___ns3__GetSpecialDayGroupInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__GetSpecialDayGroupInfo(soap, &soap_tmp___ns3__GetSpecialDayGroupInfo, "-ns3:GetSpecialDayGroupInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__GetSpecialDayGroupInfo(soap, &soap_tmp___ns3__GetSpecialDayGroupInfo, "-ns3:GetSpecialDayGroupInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ScheduleBindingProxy::recv_GetSpecialDayGroupInfo(_ns3__GetSpecialDayGroupInfoResponse &ns3__GetSpecialDayGroupInfoResponse)
{
	ns3__GetSpecialDayGroupInfoResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__GetSpecialDayGroupInfoResponse.soap_get(soap, "ns3:GetSpecialDayGroupInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ScheduleBindingProxy::send_GetSpecialDayGroupInfoList(const char *soap_endpoint_url, const char *soap_action, _ns3__GetSpecialDayGroupInfoList *ns3__GetSpecialDayGroupInfoList)
{
	struct __ns3__GetSpecialDayGroupInfoList soap_tmp___ns3__GetSpecialDayGroupInfoList;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/schedule/wsdl/GetSpecialDayGroupInfoList";
	soap_tmp___ns3__GetSpecialDayGroupInfoList.ns3__GetSpecialDayGroupInfoList = ns3__GetSpecialDayGroupInfoList;
	soap_begin(soap);
	soap_set_version(soap, 2); /* use SOAP1.2 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns3__GetSpecialDayGroupInfoList(soap, &soap_tmp___ns3__GetSpecialDayGroupInfoList);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__GetSpecialDayGroupInfoList(soap, &soap_tmp___ns3__GetSpecialDayGroupInfoList, "-ns3:GetSpecialDayGroupInfoList", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__GetSpecialDayGroupInfoList(soap, &soap_tmp___ns3__GetSpecialDayGroupInfoList, "-ns3:GetSpecialDayGroupInfoList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ScheduleBindingProxy::recv_GetSpecialDayGroupInfoList(_ns3__GetSpecialDayGroupInfoListResponse &ns3__GetSpecialDayGroupInfoListResponse)
{
	ns3__GetSpecialDayGroupInfoListResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__GetSpecialDayGroupInfoListResponse.soap_get(soap, "ns3:GetSpecialDayGroupInfoListResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ScheduleBindingProxy::send_GetSpecialDayGroups(const char *soap_endpoint_url, const char *soap_action, _ns3__GetSpecialDayGroups *ns3__GetSpecialDayGroups)
{
	struct __ns3__GetSpecialDayGroups soap_tmp___ns3__GetSpecialDayGroups;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/schedule/wsdl/GetSpecialDayGroups";
	soap_tmp___ns3__GetSpecialDayGroups.ns3__GetSpecialDayGroups = ns3__GetSpecialDayGroups;
	soap_begin(soap);
	soap_set_version(soap, 2); /* use SOAP1.2 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns3__GetSpecialDayGroups(soap, &soap_tmp___ns3__GetSpecialDayGroups);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__GetSpecialDayGroups(soap, &soap_tmp___ns3__GetSpecialDayGroups, "-ns3:GetSpecialDayGroups", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__GetSpecialDayGroups(soap, &soap_tmp___ns3__GetSpecialDayGroups, "-ns3:GetSpecialDayGroups", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ScheduleBindingProxy::recv_GetSpecialDayGroups(_ns3__GetSpecialDayGroupsResponse &ns3__GetSpecialDayGroupsResponse)
{
	ns3__GetSpecialDayGroupsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__GetSpecialDayGroupsResponse.soap_get(soap, "ns3:GetSpecialDayGroupsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ScheduleBindingProxy::send_GetSpecialDayGroupList(const char *soap_endpoint_url, const char *soap_action, _ns3__GetSpecialDayGroupList *ns3__GetSpecialDayGroupList)
{
	struct __ns3__GetSpecialDayGroupList soap_tmp___ns3__GetSpecialDayGroupList;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/schedule/wsdl/GetSpecialDayGroupList";
	soap_tmp___ns3__GetSpecialDayGroupList.ns3__GetSpecialDayGroupList = ns3__GetSpecialDayGroupList;
	soap_begin(soap);
	soap_set_version(soap, 2); /* use SOAP1.2 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns3__GetSpecialDayGroupList(soap, &soap_tmp___ns3__GetSpecialDayGroupList);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__GetSpecialDayGroupList(soap, &soap_tmp___ns3__GetSpecialDayGroupList, "-ns3:GetSpecialDayGroupList", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__GetSpecialDayGroupList(soap, &soap_tmp___ns3__GetSpecialDayGroupList, "-ns3:GetSpecialDayGroupList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ScheduleBindingProxy::recv_GetSpecialDayGroupList(_ns3__GetSpecialDayGroupListResponse &ns3__GetSpecialDayGroupListResponse)
{
	ns3__GetSpecialDayGroupListResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__GetSpecialDayGroupListResponse.soap_get(soap, "ns3:GetSpecialDayGroupListResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ScheduleBindingProxy::send_CreateSpecialDayGroup(const char *soap_endpoint_url, const char *soap_action, _ns3__CreateSpecialDayGroup *ns3__CreateSpecialDayGroup)
{
	struct __ns3__CreateSpecialDayGroup soap_tmp___ns3__CreateSpecialDayGroup;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/schedule/wsdl/CreateSpecialDayGroup";
	soap_tmp___ns3__CreateSpecialDayGroup.ns3__CreateSpecialDayGroup = ns3__CreateSpecialDayGroup;
	soap_begin(soap);
	soap_set_version(soap, 2); /* use SOAP1.2 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns3__CreateSpecialDayGroup(soap, &soap_tmp___ns3__CreateSpecialDayGroup);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__CreateSpecialDayGroup(soap, &soap_tmp___ns3__CreateSpecialDayGroup, "-ns3:CreateSpecialDayGroup", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__CreateSpecialDayGroup(soap, &soap_tmp___ns3__CreateSpecialDayGroup, "-ns3:CreateSpecialDayGroup", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ScheduleBindingProxy::recv_CreateSpecialDayGroup(_ns3__CreateSpecialDayGroupResponse &ns3__CreateSpecialDayGroupResponse)
{
	ns3__CreateSpecialDayGroupResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__CreateSpecialDayGroupResponse.soap_get(soap, "ns3:CreateSpecialDayGroupResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ScheduleBindingProxy::send_SetSpecialDayGroup(const char *soap_endpoint_url, const char *soap_action, _ns3__SetSpecialDayGroup *ns3__SetSpecialDayGroup)
{
	struct __ns3__SetSpecialDayGroup soap_tmp___ns3__SetSpecialDayGroup;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/schedule/wsdl/SetSpecialDayGroup";
	soap_tmp___ns3__SetSpecialDayGroup.ns3__SetSpecialDayGroup = ns3__SetSpecialDayGroup;
	soap_begin(soap);
	soap_set_version(soap, 2); /* use SOAP1.2 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns3__SetSpecialDayGroup(soap, &soap_tmp___ns3__SetSpecialDayGroup);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__SetSpecialDayGroup(soap, &soap_tmp___ns3__SetSpecialDayGroup, "-ns3:SetSpecialDayGroup", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__SetSpecialDayGroup(soap, &soap_tmp___ns3__SetSpecialDayGroup, "-ns3:SetSpecialDayGroup", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ScheduleBindingProxy::recv_SetSpecialDayGroup(_ns3__SetSpecialDayGroupResponse &ns3__SetSpecialDayGroupResponse)
{
	ns3__SetSpecialDayGroupResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__SetSpecialDayGroupResponse.soap_get(soap, "ns3:SetSpecialDayGroupResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ScheduleBindingProxy::send_ModifySpecialDayGroup(const char *soap_endpoint_url, const char *soap_action, _ns3__ModifySpecialDayGroup *ns3__ModifySpecialDayGroup)
{
	struct __ns3__ModifySpecialDayGroup soap_tmp___ns3__ModifySpecialDayGroup;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/schedule/wsdl/ModifySpecialDayGroup";
	soap_tmp___ns3__ModifySpecialDayGroup.ns3__ModifySpecialDayGroup = ns3__ModifySpecialDayGroup;
	soap_begin(soap);
	soap_set_version(soap, 2); /* use SOAP1.2 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns3__ModifySpecialDayGroup(soap, &soap_tmp___ns3__ModifySpecialDayGroup);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__ModifySpecialDayGroup(soap, &soap_tmp___ns3__ModifySpecialDayGroup, "-ns3:ModifySpecialDayGroup", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__ModifySpecialDayGroup(soap, &soap_tmp___ns3__ModifySpecialDayGroup, "-ns3:ModifySpecialDayGroup", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ScheduleBindingProxy::recv_ModifySpecialDayGroup(_ns3__ModifySpecialDayGroupResponse &ns3__ModifySpecialDayGroupResponse)
{
	ns3__ModifySpecialDayGroupResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__ModifySpecialDayGroupResponse.soap_get(soap, "ns3:ModifySpecialDayGroupResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ScheduleBindingProxy::send_DeleteSpecialDayGroup(const char *soap_endpoint_url, const char *soap_action, _ns3__DeleteSpecialDayGroup *ns3__DeleteSpecialDayGroup)
{
	struct __ns3__DeleteSpecialDayGroup soap_tmp___ns3__DeleteSpecialDayGroup;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/schedule/wsdl/DeleteSpecialDayGroup";
	soap_tmp___ns3__DeleteSpecialDayGroup.ns3__DeleteSpecialDayGroup = ns3__DeleteSpecialDayGroup;
	soap_begin(soap);
	soap_set_version(soap, 2); /* use SOAP1.2 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns3__DeleteSpecialDayGroup(soap, &soap_tmp___ns3__DeleteSpecialDayGroup);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__DeleteSpecialDayGroup(soap, &soap_tmp___ns3__DeleteSpecialDayGroup, "-ns3:DeleteSpecialDayGroup", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__DeleteSpecialDayGroup(soap, &soap_tmp___ns3__DeleteSpecialDayGroup, "-ns3:DeleteSpecialDayGroup", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ScheduleBindingProxy::recv_DeleteSpecialDayGroup(_ns3__DeleteSpecialDayGroupResponse &ns3__DeleteSpecialDayGroupResponse)
{
	ns3__DeleteSpecialDayGroupResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__DeleteSpecialDayGroupResponse.soap_get(soap, "ns3:DeleteSpecialDayGroupResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
